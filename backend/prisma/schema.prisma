generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum StatusUser {
    ONLINE
    OFFLINE
    INQUEUE
    INGAME
}

enum StatusGame {
    WIN
    DRAW
    LOSE
}

enum Role {
    ADMIN
    USER
    OPERATOR
    BANNED
}

enum Mode {
    CHAT // user to user
    GROUPCHAT // user to n users
    PRIVATE // user to n users
    PROTECTED // user to n user with password
}

model User {
    id        Int      @id @unique @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email    String? @unique
    username String? @unique
    avatar   String?
    tittle   String? @default("Newcomer")
    hash     String?

    twoFASecret    String?  @unique
    otpAuthUrl     String?  @unique
    isTwoFaEnabled Boolean? @default(false)

    role   Role       @default(USER)
    status StatusUser @default(ONLINE)

    stats Stats? @relation("stats")

    gamep1 Game? @relation("p1User")
    gamep2 Game? @relation("p2User")

    friendsof User[] @relation("friendslist")
    friends   User[] @relation("friendslist")

    pendingList User[] @relation("pendings")
    pendingFrom User[] @relation("pendings")

    blockedBy   User[] @relation("blockedList")
    blockedList User[] @relation("blockedList")

    achievements Achievement[]

    notifications Notification[]

    messages Message[] @relation("author")
    channel  Channel[] @relation("chanMembers")
    banned   Channel[] @relation("chanBanned")
    Channel  Channel[] @relation("chanOwner")

    invitationList Channel[] @relation("invitationList")

    @@map("Users")
}

model Achievement {
    id          Int    @id @default(autoincrement())
    user        User?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId      Int?
    title       String @unique
    description String @unique
    icon        String

    @@map("Achievements")
}

model Stats {
    id     Int   @id @default(autoincrement())
    user   User? @relation("stats", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId Int?  @unique
    lvl Int @default(1)
    exp Int @default(0)
    partyPlayed Int @default(0)
    partyWon    Int @default(0)
    partyLost   Int @default(0)

    history String[] @default([])

    @@map("Stats")
}

model Notification {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId Int
    type Int
    content String
    read    Boolean @default(false)

    @@map("Notifications")
}

model Channel {
    chanId    Int       @id @default(autoincrement())
    name      String    @unique
    owner     User      @relation("chanOwner", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ownerId   Int
    op        String[]
    read      String[] 	@default([])
    modes     Mode      @default(CHAT)
    password  String?
    muted     Int[]     @default([])
    updatedAt DateTime  @default(now())
    members   User[]    @relation("chanMembers")
    messages  Message[] @relation("chanMessages")
    banned    User[]    @relation("chanBanned")

    invitedList User[] @relation("invitationList")

    maxUsers Int? @default(10)

    @@map("Channels")
}

model Message {
    id          Int      @id @default(autoincrement())
    channel     Channel  @relation("chanMessages", fields: [channelName], references: [name], onDelete: Cascade, onUpdate: Cascade)
    channelName String
    author      User     @relation("author", fields: [authorId], references: [username], onDelete: Cascade, onUpdate: Cascade)
    authorId    String
    content     String
    createdAt   DateTime @default(now())
}

model Game {
    gameId           Int      @id @default(autoincrement())
    gameSocket       String   @default("")
    paddle           Paddle[] @relation("paddles")
    ball             Ball?    @relation("game-ball")
    pScore           Int[]    @default([])
    player1          String   @unique @default("")
    player1User      User?    @relation("p1User", fields: [player1ID], references: [id], onDelete: Cascade, onUpdate: Cascade)
    player1ID        Int?     @unique
    player2          String   @default("")
    player2User      User?    @relation("p2User", fields: [player2ID], references: [id], onDelete: Cascade, onUpdate: Cascade)
    player2ID        Int?     @unique
    connectedPlayers Int      @default(0)
    inGame           Int      @default(0)

    @@map("Game")
}

model Ball {
    id   Int   @id @default(autoincrement())
    x    Float
    y    Float
    z    Float
    game Game  @relation("game-ball", fields: [id], references: [gameId], onDelete: Cascade, onUpdate: Cascade)
}

model Paddle {
    id   Int   @id @default(autoincrement())
    x    Float
    y    Float
    z    Float
    game Game  @relation("paddles", fields: [id], references: [gameId], onDelete: Cascade, onUpdate: Cascade)
}
